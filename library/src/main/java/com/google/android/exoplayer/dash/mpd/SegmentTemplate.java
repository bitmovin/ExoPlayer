package com.google.android.exoplayer.dash.mpd;

import com.google.android.exoplayer.dash.DashSegmentIndex;
import com.google.android.exoplayer.util.Util;

import java.util.List;

/**
 * A {@link MultiSegmentBase} that uses a SegmentTemplate to define its segments.
 */
public class SegmentTemplate extends MultiSegmentBase {

    /* package */ final UrlTemplate initializationTemplate;
    /* package */ final UrlTemplate mediaTemplate;

    private final String baseUrl;

    /**
     * @param initialization A {@link RangedUri} corresponding to initialization data, if such data
     *     exists. The value of this parameter is ignored if {@code initializationTemplate} is
     *     non-null.
     * @param timescale The timescale in units per second.
     * @param presentationTimeOffset The presentation time offset. The value in seconds is the
     *     division of this value and {@code timescale}.
     * @param periodDurationMs The duration of the enclosing period in milliseconds.
     * @param startNumber The sequence number of the first segment.
     * @param duration The duration of each segment in the case of fixed duration segments. The
     *     value in seconds is the division of this value and {@code timescale}. If
     *     {@code segmentTimeline} is non-null then this parameter is ignored.
     * @param segmentTimeline A segment timeline corresponding to the segments. If null, then
     *     segments are assumed to be of fixed duration as specified by the {@code duration}
     *     parameter.
     * @param initializationTemplate A template defining the location of initialization data, if
     *     such data exists. If non-null then the {@code initialization} parameter is ignored. If
     *     null then {@code initialization} will be used.
     * @param mediaTemplate A template defining the location of each media segment.
     * @param baseUrl A url to use as the base for relative urls generated by the templates.
     */
    public SegmentTemplate(RangedUri initialization, long timescale, long presentationTimeOffset,
                           long periodDurationMs, int startNumber, long duration,
                           List<SegmentTimelineElement> segmentTimeline, UrlTemplate initializationTemplate,
                           UrlTemplate mediaTemplate, String baseUrl) {
        super(initialization, timescale, presentationTimeOffset, periodDurationMs, startNumber,
                duration, segmentTimeline);
        this.initializationTemplate = initializationTemplate;
        this.mediaTemplate = mediaTemplate;
        this.baseUrl = baseUrl;
    }

    @Override
    public RangedUri getInitialization(Representation representation) {
        if (initializationTemplate != null) {
            String urlString = initializationTemplate.buildUri(representation.format.id, 0,
                    representation.format.bitrate, 0);
            return new RangedUri(baseUrl, urlString, 0, -1);
        } else {
            return super.getInitialization(representation);
        }
    }

    @Override
    public RangedUri getSegmentUrl(Representation representation, int sequenceNumber) {
        long time = 0;
        if (segmentTimeline != null) {
            time = segmentTimeline.get(sequenceNumber - startNumber).startTime;
        } else {
            time = (sequenceNumber - startNumber) * duration;
        }
        String uriString = mediaTemplate.buildUri(representation.format.id, sequenceNumber,
                representation.format.bitrate, time);
        return new RangedUri(baseUrl, uriString, 0, -1);
    }

    @Override
    public int getLastSegmentNum() {
        if (segmentTimeline != null) {
            return segmentTimeline.size() + startNumber - 1;
        } else if (periodDurationMs == -1) {
            return DashSegmentIndex.INDEX_UNBOUNDED;
        } else {
            long durationMs = (duration * 1000) / timescale;
            return startNumber + (int) Util.ceilDivide(periodDurationMs, durationMs) - 1;
        }
    }

}
